{"ast":null,"code":"import _slicedToArray from \"C:\\\\Users\\\\user\\\\Documents\\\\rocketfy\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/slicedToArray\";\nvar _jsxFileName = \"C:\\\\Users\\\\user\\\\Documents\\\\rocketfy\\\\src\\\\components\\\\Card\\\\index.js\";\nimport React, { useRef, useContext } from 'react';\nimport { useDrag, useDrop } from 'react-dnd';\nimport BoardContext from '../Board/context';\nimport { Container, Label } from './styles';\nexport default function Card({\n  data,\n  index,\n  listIndex\n}) {\n  const ref = useRef();\n\n  const _useContext = useContext(BoardContext),\n        move = _useContext.move;\n\n  const _useDrag = useDrag({\n    item: {\n      type: 'CARD',\n      index,\n      listIndex\n    },\n    collect: monitor => ({\n      isDragging: monitor.isDragging()\n    })\n  }),\n        _useDrag2 = _slicedToArray(_useDrag, 2),\n        isDragging = _useDrag2[0].isDragging,\n        dragRef = _useDrag2[1];\n\n  const _useDrop = useDrop({\n    accept: 'CARD',\n\n    hover(item, monitor) {\n      const draggedListIndex = item.listIndex;\n      const targetListIndex = listIndex;\n      const draggedIndex = item.index;\n      const targetIndex = index;\n\n      if (draggedIndex === targetIndex && draggedListIndex === targetListIndex) {\n        return;\n      }\n\n      const targetSize = ref.current.getBoundingClientRect();\n      const targetCenter = (targetSize.bottom - targetSize.top) / 2;\n      const draggedOffset = monitor.getClientOffset();\n      const draggedTop = draggedOffset.y - targetSize.top;\n\n      if (draggedIndex < targetIndex && draggedTop < targetCenter) {\n        return;\n      }\n\n      if (draggedIndex > targetIndex && draggedTop > targetCenter) {\n        return;\n      }\n\n      move(draggedListIndex, targetListIndex, draggedIndex, targetIndex);\n      item.index = targetIndex;\n      item.listIndex = targetListIndex;\n    }\n\n  }),\n        _useDrop2 = _slicedToArray(_useDrop, 2),\n        dropRef = _useDrop2[1];\n\n  dragRef(dropRef(ref));\n  return React.createElement(React.Fragment, null, React.createElement(Container, {\n    ref: ref,\n    isDragging: isDragging,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 63\n    },\n    __self: this\n  }, React.createElement(\"header\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 64\n    },\n    __self: this\n  }, data.labels.map(label => React.createElement(Label, {\n    color: label,\n    key: label,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 66\n    },\n    __self: this\n  }))), React.createElement(\"p\", {\n    className: \"content\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 70\n    },\n    __self: this\n  }, data.content), React.createElement(\"p\", {\n    className: \"priority\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 71\n    },\n    __self: this\n  }, data.priority), React.createElement(\"p\", {\n    className: \"date\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 72\n    },\n    __self: this\n  }, data.date), data.dateCard && React.createElement(\"p\", {\n    className: \"dateCard\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 73\n    },\n    __self: this\n  }, data.dateCard), data.user && React.createElement(\"img\", {\n    src: data.user,\n    alt: \"Avatar do usu\\xE1rio que est\\xE1 com a atividade\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 76\n    },\n    __self: this\n  })));\n}","map":{"version":3,"sources":["C:\\Users\\user\\Documents\\rocketfy\\src\\components\\Card\\index.js"],"names":["React","useRef","useContext","useDrag","useDrop","BoardContext","Container","Label","Card","data","index","listIndex","ref","move","item","type","collect","monitor","isDragging","dragRef","accept","hover","draggedListIndex","targetListIndex","draggedIndex","targetIndex","targetSize","current","getBoundingClientRect","targetCenter","bottom","top","draggedOffset","getClientOffset","draggedTop","y","dropRef","labels","map","label","content","priority","date","dateCard","user"],"mappings":"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","sourcesContent":["import React, { useRef, useContext } from 'react';\nimport { useDrag, useDrop } from 'react-dnd';\n\nimport BoardContext from '../Board/context';\n\nimport { Container, Label } from './styles';\n\nexport default function Card({ data, index, listIndex }) {\n  const ref = useRef();\n  const { move } = useContext(BoardContext);\n\n  const [{ isDragging }, dragRef] = useDrag({\n    item: { type: 'CARD', index, listIndex },\n    collect: monitor => ({\n      isDragging: monitor.isDragging()\n    })\n  });\n\n  const [, dropRef] = useDrop({\n    accept: 'CARD',\n    hover(item, monitor) {\n      const draggedListIndex = item.listIndex;\n      const targetListIndex = listIndex;\n\n      const draggedIndex = item.index;\n\n      const targetIndex = index;\n\n      if (\n        draggedIndex === targetIndex &&\n        draggedListIndex === targetListIndex\n      ) {\n        return;\n      }\n\n      const targetSize = ref.current.getBoundingClientRect();\n\n      const targetCenter = (targetSize.bottom - targetSize.top) / 2;\n\n      const draggedOffset = monitor.getClientOffset();\n\n      const draggedTop = draggedOffset.y - targetSize.top;\n\n      if (draggedIndex < targetIndex && draggedTop < targetCenter) {\n        return;\n      }\n\n      if (draggedIndex > targetIndex && draggedTop > targetCenter) {\n        return;\n      }\n\n      move(draggedListIndex, targetListIndex, draggedIndex, targetIndex);\n\n      item.index = targetIndex;\n      item.listIndex = targetListIndex;\n    }\n  });\n\n  dragRef(dropRef(ref));\n\n  return (\n    <>\n      <Container ref={ref} isDragging={isDragging}>\n        <header>\n          {data.labels.map(label => (\n            <Label color={label} key={label} />\n          ))}\n        </header>\n\n        <p className=\"content\">{data.content}</p>\n        <p className=\"priority\">{data.priority}</p>\n        <p className=\"date\">{data.date}</p>\n        {data.dateCard && <p className=\"dateCard\">{data.dateCard}</p>}\n\n        {data.user && (\n          <img\n            src={data.user}\n            alt=\"Avatar do usuário que está com a atividade\"\n          />\n        )}\n      </Container>\n    </>\n  );\n}\n"]},"metadata":{},"sourceType":"module"}